C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PROTOCOL
OBJECT MODULE PLACED IN .\Objects\protocol.obj
COMPILER INVOKED BY: F:\Keil_v5\C51\BIN\C51.EXE mcu_sdk\protocol.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\mcu_sdk;.\sys
                    -tem) DEBUG OBJECTEXTEND PRINT(.\Listings\protocol.lst) TABS(2) OBJECT(.\Objects\protocol.obj)

line level    source

   1          /****************************************Copyright (c)*************************
   2          **                               Copyright (C) 2014-2020, Tuya Inc., All Rights Reserved
   3          **
   4          **                                 http://www.tuya.com
   5          **
   6          **--------------File Information-------------------------------------------------------
   7          
   8          ** file name :protocol.c
   9          ** description: send / report data processing functions
  10          * * instructions for use
  11          
  12                            *******important, be sure to see it!********
  13          
  14          * * 1. Users implement the function of sending / reporting data in this file
  15          * * 2. The ID/TYPE and data processing functions of DP need to be implemented according to the actual defi
             -nition.
  16          * * 3. There is a # err prompt inside the function that requires the user to implement the code after star
             -ting some macro definitions. Delete the # err after completing the function.
  17          **
  18          **--------------Revision record---------------------------------------------------
  19          ** version: v1.0
  20          ** date : may 3, 2017 
  21          description: Initial version
  22          **
  23          
  24          **version::v2.0
  25          ** date: March 23, 2020
  26          ** description: 
  27          1. Added module unbinding interface support, command code 0x09.
  28          2.Add rf RF test interface support, command code 0x0e.
  29          3.Add record-based data reporting interface support,command code 0xe0.
  30          4. Added access to real-time time API support,command code 0xe1.
  31          5. Added support for modifying sleep mode state bluetooth broadcast interval,command code 0xe2.
  32          6. Added support for turning off system clock,command code 0xe4.
  33          7. Increase low power consumption to enable support,commadn code 0xe5.
  34          8. Add dynamic password authentication interface support,command code 0xe6.
  35          9. Added support for disconnecting Bluetooth connection,command code 0xe7.
  36          10. Added support for querying MCU version number,command code 0xe8.
  37          11. Added support for MCU to actively send version Numbers,command code 0xe9.
  38          12. Add OTA upgrade request support,command code 0xea.
  39          13. Add OTA update file information support,command 0xeb.
  40          14. Add OTA upgrade file migration request support,command code 0xec.
  41          15. Add OTA upgrade data support,command code 0xed.
  42          16. Add OTA upgrade end support,command code 0xee.
  43          17. Added support for MCU to acquire module version information,commadn code 0xa0.
  44          18. Added support for resuming factory Settings notifications,command code 0xa1.
  45          19. Add MCU OTA demo code.
  46          20. Optimized bt_uart_service.
  47          **
  48          **-----------------------------------------------------------------------------
  49          ******************************************************************************/
  50          
  51          
  52          #include "bluetooth.h"
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 2   

  53            
  54           #include "main.h"
  55          
  56          /******************************************************************************
  57                          Transplant notes:
  58          1.MCU call bt_uart_service() in the main loop.
  59          2: After the program is initialized normally, it is recommended not to close the serial port interrupt. If
             - the interrupt must be turned off, the interrupt time must be short. Turning off the interrupt will cause the serial por
             -t data packet to be lost.
  60          3: Do not call the report function in the interrupt/timer interrupt
  61          ******************************************************************************/
  62          
  63                   
  64          /******************************************************************************
  65                          Step 1: initialization
  66          1: Include the header file "Bt.h" in files that need to be used with BT-related files
  67          2: Call the BT_protocol_init () function of the McU_api.c file during MCU initialization
  68          3: Fill the MCU serial byte transmission function into the protocol. C file uart_transmit_output function,
             - and delete #error
  69          4: Call the Uart_receive_input function in the file mcu_api. c from the MCU uart port receipt function, an
             -d pass in the received bytes as parameters
  70          5: After the MCU enters the while loop, it calls the bT_uart_service () function in the mcu_api. c file
  71          ******************************************************************************/
  72          
  73          /******************************************************************************
  74                                  1:Comparison Table of sequence types of dp data points
  75                * * this is automatically generated code. If there are any changes on the development platform, please
             - download MCU_SDK** again.
  76          ******************************************************************************/
  77          const DOWNLOAD_CMD_S download_cmd[] =
  78          {
  79            {DPID_FREQUENCY, DP_TYPE_VALUE},
  80            {DPID_VOLTAGE, DP_TYPE_VALUE},
  81          };
  82          
  83          
  84          
  85          
  86          /******************************************************************************
  87                         2: uart port single byte sending function
  88          Please fill the MCU serial port sending function into this function, and pass the received data into the s
             -erial port sending function as parameters
  89          ******************************************************************************/
  90          
  91          /*****************************************************************************
  92          Function name: uart_transmit_output
  93          Function description: send data processing
  94          Input parameters: value: uart port receives byte data
  95          Return parameter: none
  96          Instructions for use: please fill the MCU serial port sending function into this function, and pass the re
             -ceived data into the serial port sending function as parameters
  97          *****************************************************************************/
  98          void uart_transmit_output(unsigned char value)
  99          {
 100   1       //#error "Please fill the MCU serial port sending function into this function and delete the line"
 101   1      
 102   1        Uart_PutChar(value);
 103   1      }
 104          /******************************************************************************
 105                         Step 2: implement specific user functions
 106          1:APP dispatch data processing
 107          2: data reporting processing
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 3   

 108          ******************************************************************************/
 109          
 110          /******************************************************************************
 111                        1: all data reporting and processing
 112          The current function handles all data reporting (including dispatch / escalation and escalation only)
 113            Users are required to implement according to the actual situation:
 114            1: it is necessary to implement data points that can be sent / reported.
 115            2: only data points need to be reported.
 116          This function must be called within MCU.
 117          Users can also call this function to report all data.
 118          ******************************************************************************/
 119          
 120          // automatically generate data reporting function.
 121          
 122          /*****************************************************************************
 123          Function name: all_data_update
 124          Function description: upload all dp information of the system to achieve data synchronization between APP 
             -and muc
 125          Input parameters: none
 126          Return parameter: none
 127          Instructions for use: this function needs to be called internally in SDK
 128                 MCU must implement the data reporting function within this function, including reporting only and dow
             -nloadable hairstyle data.
 129          *****************************************************************************/
 130          void all_data_update(void)
 131          {
 132   1        //#error "Please process all DP data here and delete the row when the processing is complete"
 133   1        // This code is automatically generated for the platform. Please modify each function according to the a
             -ctual data
 134   1          mcu_dp_value_update(DPID_FREQUENCY,fre_set); //VALUE型数据上报;
 135   1          mcu_dp_value_update(DPID_VOLTAGE,voltage); //VALUE型数据上报;
 136   1      
 137   1      
 138   1      
 139   1      }
 140          
 141          
 142          /******************************************************************************
 143                                          WARNING!!!    
 144                        2. Report and process all data
 145          Automatic code template function, the specific user to realize the data processing
 146          ******************************************************************************/
 147          
 148          /*****************************************************************************
 149          函数名称 : dp_download_frequency_handle
 150          功能描述 : 针对DPID_FREQUENCY的处理函数
 151          输入参数 : value:数据源数据
 152                  : length:数据长度
 153          返回参数 : 成功返回:SUCCESS/失败返回:ERROR
 154          使用说明 : 可下发可上报类型,需要在处理完数据后上报处理结果至app
 155          *****************************************************************************/
 156          static unsigned char dp_download_frequency_handle(const unsigned char value[], unsigned short length)
 157          {
 158   1          //示例:当前DP类型为VALUE
 159   1          unsigned char ret;
 160   1          unsigned long frequency;
 161   1          
 162   1          frequency = mcu_get_dp_download_value(value,length);
 163   1          /*
 164   1          //VALUE类型数据处理
 165   1          
 166   1          */
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 4   

 167   1          fre_set=frequency;
 168   1          //处理完DP数据后应有反馈
 169   1          ret = mcu_dp_value_update(DPID_FREQUENCY,frequency);
 170   1          if(ret == SUCCESS)
 171   1              return SUCCESS;
 172   1          else
 173   1              return ERROR;
 174   1      }
 175          
 176          
 177          /******************************************************************************
 178                                          WARNING!!!                     
 179          This code is SDK internal call, please implement the function internal data according to the actual DP dat
             -a
 180          ******************************************************************************/
 181          
 182          /******************************************************************************
 183                                          WARNING!!!                     
 184          The following function users do not modify!!
 185          ******************************************************************************/
 186          
 187          /*****************************************************************************
 188          Function name: DP_download_handle
 189          Function description: DP release processing function
 190          Input parameter: DPID :DP serial number
 191                     value:Dp data buffer address
 192                     length:dp data length
 193          Return parameters:SUCCESS/ERRO
 194          Instructions: This function cannot be modified by the user
 195          *****************************************************************************/
 196          unsigned char dp_download_handle(unsigned char dpid,const unsigned char value[], unsigned short length)
 197          {
 198   1        /*********************************
 199   1        The current function handles the call to issue/report data
 200   1        The specific function needs to implement the data processing
 201   1        The processing results need to be fed back to the APP side for completion, otherwise the APP will think 
             -that the delivery fails
 202   1        ***********************************/
 203   1        unsigned char ret;
 204   1        switch(dpid)
 205   1        {
 206   2              case DPID_FREQUENCY:
 207   2                  //频率处理函数
 208   2                  ret = dp_download_frequency_handle(value,length);
 209   2              break;
 210   2      
 211   2      
 212   2        default:
 213   2          break;
 214   2        }
 215   1        return ret;
 216   1      }
 217          /*****************************************************************************
 218          Function name: get_download_cmd_total
 219          Function description: Gets the sum of all DP commands
 220          Input parameters: None
 221          Return parameter: issue the sum of commands
 222          Instructions: This function cannot be modified by the user
 223          *****************************************************************************/
 224          unsigned char get_download_cmd_total(void)
 225          {
 226   1        return(sizeof(download_cmd) / sizeof(download_cmd[0]));
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 5   

 227   1      }
 228          
 229          //////////////////////////////////The current version of MCU SDK has a new support protocol interface over
             - the previous version////////////////////
 230          #ifdef TUYA_BCI_UART_COMMON_UNBOUND_REQ 
 231          /*****************************************************************************
 232          Function name: bt_unbound_req
 233          Function description: Send the unbind request to the module, and the module will unbind the Bluetooth conn
             -ection after receiving the instruction
 234          Input parameters: None
 235          Return parameter: none
 236          Instructions: The MCU calls for active untying
 237          *****************************************************************************/
 238          void bt_unbound_req(void)
 239          {
 240   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_UNBOUND_REQ,0);
 241   1      }
 242          #endif
 243          
 244          #ifdef TUYA_BCI_UART_COMMON_RF_TEST 
 245          /*****************************************************************************
 246          Function name: bt_rf_test_req
 247          Function description: transmit frequency test request to the module
 248          Input parameters: None
 249          Return parameter: none
 250          Instructions for use:
 251          *****************************************************************************/
 252          void bt_rf_test_req(void)
 253          {
 254   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_RF_TEST,0);
 255   1      }
 256          /*****************************************************************************
 257          Function name: bt_rf_test_result
 258          Function description: Bluetooth RF test feedback
 259          Input parameter: Result: Bluetooth RF test result;0: failure /1: success
 260                 Rssi: Successful test indicates that the Bluetooth signal strength/test failure value is meaningless
 261          Return parameter: none
 262          Instructions: The MCU needs to improve the function itself
 263          *****************************************************************************/
 264          void bt_rf_test_result(unsigned char result,signed char rssi)
 265          {
 266   1       // #error "Please improve the function by yourself and delete the line after completion"
 267   1        if(result == 0)
 268   1        {
 269   2        // The test failed
 270   2        }
 271   1        else
 272   1        {
 273   2        // The test was successful
 274   2        // RSSI is the signal strength, which is generally greater than -70dbM and within the normal range of Blu
             -etooth signals
 275   2        }
 276   1        
 277   1      }
*** WARNING C280 IN LINE 264 OF mcu_sdk\protocol.c: 'rssi': unreferenced local variable
 278          #endif
 279          
 280          #ifdef TUYA_BCI_UART_COMMON_SEND_STORAGE_TYPE 
 281          /*****************************************************************************
 282          Function name: bt_send_recordable_DP_data
 283          Function description: report the recorded data
 284          Input parameters: Type-1: Bluetooth module built-in time report -2: original data only report, no time -3:
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 6   

             - MCU built-in time report
 285              Dpid: former datapoint serial number
 286              Dptype: Corresponds to a datapoint specific data type on the open platform
 287              value:
 288              len:
 289          Return parameter: none
 290          Instructions: the MCU needs to improve the function itself
 291            It is recommended to use the cache queue. All data to be sent to the module should be put into the MCU ca
             -che queue, and the next data should be reported after one has been reported successfully. The recorded data should ensur
             -e that each data has been reported successfully
 292          *****************************************************************************/
 293          void bt_send_recordable_dp_data(unsigned char snedType,unsigned char dpid,unsigned char dpType, unsigned c
             -har value[],unsigned short len)
 294          {
 295   1        //#error "Please improve the function by yourself and delete the line after completion"
 296   1        if(snedType==0x01)//Format 1, Bluetooth module self-report time
 297   1        {
 298   2      
 299   2        }
 300   1        else if(snedType==0x02)//Format 2, report only the original data, no time (Note: Telink docking platform 
             -does not support this format)
 301   1        {
 302   2      
 303   2        }
 304   1        else if(snedType==0x03)//Format 3, MCU own time report
 305   1        {
 306   2      
 307   2        }
 308   1      }
*** WARNING C280 IN LINE 293 OF mcu_sdk\protocol.c: 'dpid': unreferenced local variable
*** WARNING C280 IN LINE 293 OF mcu_sdk\protocol.c: 'dpType': unreferenced local variable
*** WARNING C280 IN LINE 293 OF mcu_sdk\protocol.c: 'value': unreferenced local variable
*** WARNING C280 IN LINE 293 OF mcu_sdk\protocol.c: 'len': unreferenced local variable
 309          /*****************************************************************************
 310          Function name: bt_send_recordable_dp_data_result
 311          Function description: report the recorded data
 312          Input parameter :result: 0 storage success, 1 storage failure
 313          Return parameter: none
 314          Instructions: the MCU needs to improve the function itself
 315          *****************************************************************************/
 316          void bt_send_recordable_dp_data_result(unsigned char result)
 317          {
 318   1        //#error "Please improve the function by yourself and delete the line after completion"
 319   1      }
*** WARNING C280 IN LINE 316 OF mcu_sdk\protocol.c: 'result': unreferenced local variable
 320          #ifdef TUYA_BCI_UART_COMMON_SEND_TIME_SYNC_TYPE 
 321          /*****************************************************************************
 322          Function name: bt_send_time_sync_req
 323          Function description: Send time synchronization request to module
 324          Input parameter: sync_time_type
 325          0x00- Gets 7 bytes of time time type +2
 326          Byte time zone information
 327          0x01- Gets 13 bytes of MS level Unix time
 328          + 2-byte time zone information
 329          0x02-get 7 byte time type + 2 Byte time zone information
 330          
 331          Return parameter: none
 332          *****************************************************************************/
 333          void bt_send_time_sync_req(unsigned char sync_time_type)
 334          {
 335   1        unsigned short length = 0;
 336   1        
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 7   

 337   1          length = set_bt_uart_byte(length,sync_time_type);
 338   1          
 339   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_SEND_TIME_SYNC_TYPE,length);
 340   1      }
 341          /*****************************************************************************
 342          Function name: bt_time_sync_result
 343          Function description: send the result of time synchronization to the module
 344          Input parameters: result synchronization result 0 successful, other failed
 345              sync_time_type :time format
 346              Bt_time: Custom time (valid if time format 0 or 1)
 347              Time_zone_100: time zone
 348              Time_stamp_ms: timestamp (valid if it is in time format 1)
 349          Return parameter: none
 350          Instructions: MCU needs to improve the function on its own.
 351          *****************************************************************************/
 352          void bt_time_sync_result(unsigned char result,unsigned char sync_time_type,bt_time_struct_data_t bt_time,u
             -nsigned short time_zone_100, long time_stamp_ms)
 353          {
 354   1        //#error "Please improve the function by yourself and delete the line after completion"
 355   1        if(result == 0x00)
 356   1        {
 357   2          // synchronization time is successful
 358   2          if(sync_time_type==0x00||sync_time_type==0x02)
 359   2          {
 360   3            // populate the data of custom time format in bt_time into the mcu clock system
 361   3            //time_zone_100
 362   3          }
 363   2          else if(sync_time_type==0x01)
 364   2          {
 365   3            // populate the timestamp in time_stamp_ms into the mcu clock system
 366   3            //time_zone_100
 367   3          }
 368   2        }
 369   1        else
 370   1        {
 371   2          // synchronization time failed
 372   2        }
 373   1      }
*** WARNING C280 IN LINE 352 OF mcu_sdk\protocol.c: 'bt_time': unreferenced local variable
*** WARNING C280 IN LINE 352 OF mcu_sdk\protocol.c: 'time_zone_100': unreferenced local variable
*** WARNING C280 IN LINE 352 OF mcu_sdk\protocol.c: 'time_stamp_ms': unreferenced local variable
 374          #endif
 375          #endif
 376          
 377          #ifdef TUYA_BCI_UART_COMMON_MODIFY_ADV_INTERVAL
 378          /*****************************************************************************
 379          Function name: bt_modify_adv_interval_req
 380          Function description: send a request to the module to modify the broadcast interval of the module at low p
             -ower consumption
 381          Input parameter: value * 100ms equals the broadcast interval, value (0-20 to be modified)
 382          Return parameter: none
 383          Instructions for use:
 384          *****************************************************************************/
 385          void bt_modify_adv_interval_req(unsigned char value)
 386          {
 387   1        unsigned short length = 0;
 388   1        
 389   1          length = set_bt_uart_byte(length,value);
 390   1          
 391   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_MODIFY_ADV_INTERVAL,length);
 392   1      }
 393          /*****************************************************************************
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 8   

 394          Function name: bt_modify_adv_interval_result
 395          Function description:Processing the result of modifying the broadcast interval
 396          Input parameters: result synchronization result 0 successful, other failed
 397          
 398          Return parameter: none
 399          Instructions: MCU needs to improve the function on its own.
 400          *****************************************************************************/
 401          void bt_modify_adv_interval_result(unsigned char result)
 402          {
 403   1        //#error "Please improve the function by yourself and delete the line after completion"
 404   1        if(result == 0x00)
 405   1        {
 406   2          //success
 407   2      
 408   2        }
 409   1        else
 410   1        {
 411   2          //failed
 412   2        }
 413   1      }
 414          #endif
 415          
 416          #ifdef TUYA_BCI_UART_COMMON_TURNOFF_SYSTEM_TIME
 417          /*****************************************************************************
 418          Function name: bt_close_timer_req
 419          Function description: send a request to the module to turn off the system clock (currently available on te
             -link platform only)
 420          Input parameters: value 0 off, 1 on
 421          Return parameter: none
 422          Instructions for use:
 423          *****************************************************************************/
 424          void bt_close_timer_req(unsigned char value)
 425          {
 426   1        unsigned short length = 0;
 427   1        
 428   1          length = set_bt_uart_byte(length,value);
 429   1          
 430   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_TURNOFF_SYSTEM_TIME,length);
 431   1      }
 432          /*****************************************************************************
 433          Function name: bt_close_timer_result
 434          Function description: processing result
 435          Input parameters: 0 successful, other failed
 436          
 437          Return parameter: none
 438          Instructions: MCU needs to improve the function on its own.
 439          *****************************************************************************/
 440          void bt_close_timer_result(unsigned char result)
 441          {
 442   1        //#error "Please improve the function by yourself and delete the line after completion"
 443   1        if(result == 0x00)
 444   1        {
 445   2          //success
 446   2      
 447   2        }
 448   1        else
 449   1        {
 450   2          //failed
 451   2        }
 452   1      }
 453          #endif
 454          
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 9   

 455          #ifdef TUYA_BCI_UART_COMMON_ENANBLE_LOWER_POWER
 456          /*****************************************************************************
 457          Function name: bt_enable_lowpoer_req
 458          Function description: send a request to enable low power consumption to the module (currently only applica
             -ble to telink platform)
 459          Input parameters: value 0 off, 1 on
 460          Return parameter: none
 461          *****************************************************************************/
 462          void bt_enable_lowpoer_req(unsigned char value)
 463          {
 464   1        unsigned short length = 0;
 465   1        
 466   1          length = set_bt_uart_byte(length,value);
 467   1          
 468   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_ENANBLE_LOWER_POWER,length);
 469   1      }
 470          /*****************************************************************************
 471          Function name: bt_enable_lowpoer_result
 472          Function description: processing result
 473          Input parameters: 0 successful, other failed
 474          
 475          Return parameter: none
 476          Instructions: MCU needs to improve the function on its own.
 477          *****************************************************************************/
 478          
 479          void bt_enable_lowpoer_result(unsigned char result)
 480          {
 481   1        //#error "Please improve the function by yourself and delete the line after completion"
 482   1        if(result == 0x00)
 483   1        {
 484   2          //success
 485   2      
 486   2        }
 487   1        else
 488   1        {
 489   2          //failed
 490   2        }
 491   1      }
 492          #endif
 493          
 494          #ifdef TUYA_BCI_UART_COMMON_SEND_ONE_TIME_PASSWORD_TOKEN
 495          /*****************************************************************************
 496          Function name: bt_send_one_time_password_token
 497          Function description: dynamic password check
 498          Input parameters dynamic password entered on the: value cmcu side, len 8
 499          Return parameter: none
 500          Instructions for use: it is used to lock the universal serial port docking dynamic password function.
 501          *****************************************************************************/
 502          unsigned char bt_send_one_time_password_token(unsigned char value[],unsigned char len)
 503          {
 504   1        unsigned short length = 0;
 505   1        if(len!=8)return 0;
 506   1        
 507   1          length = set_bt_uart_buffer(length,value,8);
 508   1          
 509   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_SEND_ONE_TIME_PASSWORD_TOKEN,length);
 510   1      }
 511          /*****************************************************************************
 512          Function name:bt_send_one_time_password_token_result
 513          Function description: get the result of one-time dynamic password matching from the module
 514          Input parameters:0x00 password check passed, 0x01 password check failed
 515          Return parameter: none
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 10  

 516          Instructions: MCU needs to improve the function on its own.
 517          *****************************************************************************/
 518          void bt_send_one_time_password_token_result(unsigned char result)
 519          {
 520   1        //#error "Please improve the function by yourself and delete the line after completion"
 521   1        if(result == 0x00)
 522   1        {
 523   2          // password verification passed
 524   2      
 525   2        }
 526   1        else
 527   1        {
 528   2          //Password check failed.
 529   2        }
 530   1      }
 531          #endif
 532          
 533          #ifdef TUYA_BCI_UART_COMMON_ACTIVE_DISCONNECT
 534          /*****************************************************************************
 535          Function name: bt_disconnect_req
 536          Function description: send a request to disconnect the Bluetooth connection to the module
 537          Input parameters: value 0 off, 1 on
 538          Return parameter: none
 539          Instructions for use:
 540          *****************************************************************************/
 541          void bt_disconnect_req(void)
 542          {
 543   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_ACTIVE_DISCONNECT,0);
 544   1      }
 545          /*****************************************************************************
 546          Function name: bt_disconnect_result
 547          Function description: receive the result that the module is disconnected from Bluetooth
 548          Input parameters: result result 0 successful, other failed
 549          
 550          Return parameter: none
 551          Instructions: MCU needs to improve the function on its own.
 552          *****************************************************************************/
 553          void bt_disconnect_result(unsigned char result)
 554          {
 555   1        //#error "Please improve the function by yourself and delete the line after completion"
 556   1        if(result == 0x00)
 557   1        {
 558   2          //success
 559   2      
 560   2        }
 561   1        else
 562   1        {
 563   2          //failed
 564   2        }
 565   1      }
 566          #endif
 567          
 568          #ifdef TUYA_BCI_UART_COMMON_MCU_SEND_VERSION
 569          /*****************************************************************************
 570          Function name: bt_send_mcu_ver
 571          Function description: send the MCU version number to the module actively, mainly in order that the module 
             -can obtain the MCU version information in a more timely manner.
 572          
 573          Return parameter: none
 574          Instructions: MCU can be called once after initialization of serial port.
 575          *****************************************************************************/
 576          void bt_send_mcu_ver(void)
C51 COMPILER V9.60.0.0   PROTOCOL                                                          08/31/2021 12:55:22 PAGE 11  

 577          {
 578   1        unsigned short length = 0;
 579   1        length = set_bt_uart_buffer(length,(unsigned char *)MCU_APP_VER_NUM,3);
 580   1        length = set_bt_uart_buffer(length,(unsigned char *)MCU_HARD_VER_NUM,3);
 581   1        bt_uart_write_frame(TUYA_BCI_UART_COMMON_MCU_SEND_VERSION,length);
 582   1      }
 583          #endif
 584          #ifdef TUYA_BCI_UART_COMMON_FACTOR_RESET_NOTIFY
 585          /*****************************************************************************
 586          Function name: bt_factor_reset_notify
 587          Function description: notification sent to mcu after the module resumes factory settings
 588          
 589          Return parameter: none
 590          Instructions for use: MCU can complete the operation of restoring factory settings with MCU here.
 591          *****************************************************************************/
 592          void bt_factor_reset_notify(void)
 593          {
 594   1        //#error "Please improve the function by yourself and delete the line after completion"
 595   1      }
 596          #endif
 597          
*** WARNING C291 IN LINE 510 OF mcu_sdk\protocol.c: not every exit path returns a value


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    373    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      4      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  10 WARNING(S),  0 ERROR(S)
